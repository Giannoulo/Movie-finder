{"version":3,"sources":["Redux/Actions/types.js","Redux/Actions/movieListActions.js","Components/Header/Header.js","Components/Card/MovieTile.js","Functions/RecommendedMoviesFunctions.js","Data/imdb_top_1000.csv","Functions/MovieSelectionFunctions.js","Components/Card/Card.js","App.js","reportWebVitals.js","Redux/Reducers/movieListReducer.js","store.js","index.js"],"names":["POPULATE_MOVIE_LIST","ADD_PICKED_MOVIE","CARD_NUMBER","PLAY_FINDER","RESTART_FINDER","DARK_MODE","restartFinderFunction","type","mapDispatchToProps","toggleDarkMode","connect","state","darkMode","props","className","id","onClick","icon","faFilm","name","increaseCardNumber","addPickedMovie","movie","payload","useState","showDescription","setshowDescription","faInfoCircle","onMouseEnter","onMouseLeave","onTouchStart","recommendation","undefined","src","alt","findRecommendedMovies","pickedMovieList","movieList","newMovieList","pickedMovieListIds","map","earliestReleasedYear","genreMap","Map","forEach","parseInt","split","genre","trim","has","set","get","getOldestYearAndGenres","topGenre","entries","sort","a","b","keys","next","value","getTopGenre","includes","length","push","getNewMovies","foundMovie","movieIds","movieId","Math","floor","random","getRandomNumbers","find","toString","populateMovieList","playFinderFunction","playFinder","cardNumber","useEffect","Papa","parse","movieCsvFile","download","complete","results","data","shift","error","Error","read_csv","movieTiles","setmovieTiles","renderMovieTiles","newMovie","getMovieTiles","showRecommendationMovies","recommendedMovieList","recommendedMovie","recommendMovies","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","movieListReducer","action","middleware","thunk","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4dd9a3b5.chunk.js","sourcesContent":["/*\n ** types.js\n ** A list of resuable types to use througout the actions\n */\nexport const POPULATE_MOVIE_LIST = \"POPULATE_MOVIE_LIST\";\nexport const ADD_PICKED_MOVIE = \"ADD_PICKED_MOVIE\";\n\nexport const CARD_NUMBER = \"CARD_NUMBER\";\nexport const PLAY_FINDER = \"PLAY_FINDER\";\nexport const RESTART_FINDER = \"RESTART_FINDER\";\n\nexport const DARK_MODE = \"DARK_MODE\";\n","import {\n  ADD_PICKED_MOVIE,\n  POPULATE_MOVIE_LIST,\n  PLAY_FINDER,\n  CARD_NUMBER,\n  DARK_MODE,\n  RESTART_FINDER,\n} from \"./types\";\n\n/*\n ** movieListActions.js\n ** Controls actions around the picked movie list used in the application.\n */\n\nexport const populateMovieList = (movieList) => {\n  return {\n    type: POPULATE_MOVIE_LIST,\n    payload: movieList,\n  };\n};\n\nexport const addPickedMovie = (movie) => {\n  return {\n    type: ADD_PICKED_MOVIE,\n    payload: movie,\n  };\n};\n\nexport const playFinderFunction = () => {\n  return {\n    type: PLAY_FINDER,\n  };\n};\n\nexport const restartFinderFunction = () => {\n  return {\n    type: RESTART_FINDER,\n  };\n};\n\nexport const increaseCardNumber = () => {\n  return {\n    type: CARD_NUMBER,\n  };\n};\n\nexport const toggleDarkMode = () => {\n  return {\n    type: DARK_MODE,\n  };\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm } from \"@fortawesome/free-solid-svg-icons\";\nimport { connect } from \"react-redux\";\nimport { toggleDarkMode, restartFinderFunction } from \"../../Redux/Actions/movieListActions\";\n\nfunction Header(props) {\n  return (\n    <>\n      {props.darkMode ? (\n        <div className=\"row align-items-center dark\" id=\"header-row\">\n          <div className=\"col-9 dark\" id=\"header-col\">\n            <span onClick={() => props.restartFinderFunction()}>\n              <FontAwesomeIcon icon={faFilm} id=\"header-icon\" className=\"dark\" />\n              Movie Finder\n            </span>\n          </div>\n          <div className=\"col-3\">\n            <div id=\"dark-mode-title\">Dark Mode</div>\n            <label className=\"switch\">\n              <input\n                type=\"checkbox\"\n                name=\"dark-mode-checkbox\"\n                onClick={() => props.toggleDarkMode()}\n              />\n              <span className=\"slider round\"></span>\n            </label>\n          </div>\n        </div>\n      ) : (\n        <div className=\"row align-items-center\" id=\"header-row\">\n          <div className=\"col-9\" id=\"header-col\">\n            <span onClick={() => props.restartFinderFunction()}>\n              <FontAwesomeIcon icon={faFilm} id=\"header-icon\" />\n              Movie Finder\n            </span>\n          </div>\n          <div className=\"col-3\">\n            <div id=\"dark-mode-title\">Dark Mode</div>\n            <label className=\"switch\">\n              <input\n                type=\"checkbox\"\n                name=\"dark-mode-checkbox\"\n                onClick={() => props.toggleDarkMode()}\n              />\n              <span className=\"slider round\"></span>\n            </label>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\nconst mapStateToProps = (state) => ({ darkMode: state.darkMode });\n\nconst mapDispatchToProps = { toggleDarkMode, restartFinderFunction };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { increaseCardNumber, addPickedMovie } from \"../../Redux/Actions/movieListActions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nconst MovieTile = (props) => {\n  const [showDescription, setshowDescription] = useState(\"movie-tile-description-hidden\");\n  return (\n    <>\n      {props.darkMode ? (\n        <div className=\"movie-tile \">\n          <FontAwesomeIcon\n            icon={faInfoCircle}\n            className=\"movietile-info\"\n            onMouseEnter={() => setshowDescription(\"movie-tile-description-shown\")}\n            onMouseLeave={() => setshowDescription(\"movie-tile-description-hidden\")}\n            onTouchStart={() => setshowDescription(\"movie-tile-description-shown\")}\n          />\n          <p className={showDescription}>{props.movie[4]}</p>\n          <img\n            onClick={\n              props.recommendation\n                ? undefined\n                : () => {\n                    props.increaseCardNumber();\n                    props.addPickedMovie(props.movie);\n                  }\n            }\n            src={props.movie[0]}\n            alt={props.movie[1]}\n            className=\"movie-tile-img dark-tile-img\"\n          />\n          <div className=\"movie-tile-title\">{props.movie[1]}</div>\n        </div>\n      ) : (\n        <div className=\"movie-tile\">\n          <FontAwesomeIcon\n            icon={faInfoCircle}\n            className=\"movietile-info\"\n            onMouseEnter={() => setshowDescription(\"movie-tile-description-shown\")}\n            onMouseLeave={() => setshowDescription(\"movie-tile-description-hidden\")}\n            onTouchStart={() => setshowDescription(\"movie-tile-description-shown\")}\n          />\n          <p className={showDescription}>{props.movie[4]}</p>\n          <img\n            onClick={\n              props.recommendation\n                ? undefined\n                : () => {\n                    props.increaseCardNumber();\n                    props.addPickedMovie(props.movie);\n                  }\n            }\n            src={props.movie[0]}\n            alt={props.movie[1]}\n            className=\"movie-tile-img\"\n          />\n          <div className=\"movie-tile-title\">{props.movie[1]}</div>\n        </div>\n      )}\n    </>\n  );\n};\nconst mapStateToProps = (state) => ({ darkMode: state.darkMode });\n\nconst mapDispatchToProps = { increaseCardNumber, addPickedMovie };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieTile);\n","import MovieTile from \"../Components/Card/MovieTile\";\n\nconst getOldestYearAndGenres = (pickedMovieList) => {\n  let earliestReleasedYear = 3000;\n  const genreMap = new Map();\n\n  // Find the oldest picked movie year\n  pickedMovieList.forEach((movie) => {\n    if (parseInt(movie[2]) < earliestReleasedYear) {\n      earliestReleasedYear = parseInt(movie[2]);\n    }\n    // Count genre occurences\n    const genres = movie[3].split(\",\").map((genre) => genre.trim());\n    genres.forEach((genre) => {\n      if (!genreMap.has(genre)) {\n        genreMap.set(genre, 0);\n      }\n      genreMap.set(genre, genreMap.get(genre) + 1);\n    });\n  });\n  return { earliestReleasedYear, genreMap };\n};\n\nconst getTopGenre = (genreMap) => {\n  const genreMapSorted = new Map([...genreMap.entries()].sort((a, b) => b[1] - a[1]));\n  return genreMapSorted.keys().next().value;\n};\n\nconst findRecommendedMovies = (pickedMovieList, movieList) => {\n  /*\n    Filter the initial movie list and show movies that are newer than \n    the oldest picked movie and contain the users most popular genre\n    */\n  const newMovieList = [];\n  const pickedMovieListIds = pickedMovieList.map((movie) => movie[5]);\n  const { earliestReleasedYear, genreMap } = getOldestYearAndGenres(pickedMovieList);\n  const topGenre = getTopGenre(genreMap);\n\n  movieList.forEach((movie) => {\n    if (\n      !pickedMovieListIds.includes(movie[5]) &&\n      movie[3]\n        .split(\",\")\n        .map((genre) => genre.trim())\n        .includes(topGenre) &&\n      parseInt(movie[2]) > earliestReleasedYear &&\n      newMovieList.length < 10\n    ) {\n      newMovieList.push(movie);\n    }\n  });\n  return newMovieList;\n};\n\n// Return recommended movie tiles jsx\nexport const recommendMovies = (pickedMovieList, movieList) => {\n  const recommendedMovieList = findRecommendedMovies(pickedMovieList, movieList);\n  return (\n    <>\n      {recommendedMovieList.map((recommendedMovie) => (\n        <div className=\"col movie-tile-col\" key={recommendedMovie[5]}>\n          <MovieTile movie={recommendedMovie} recommendation={true} />\n        </div>\n      ))}\n    </>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/imdb_top_1000.e12a5ba6.csv\";","import Papa from \"papaparse\";\nimport movieCsvFile from \"../Data/imdb_top_1000.csv\";\nimport MovieTile from \"../Components/Card/MovieTile\";\n\nexport const read_csv = (props) => {\n  // Load the 1000 movie list from the csv file to the redux state\n\n  try {\n    Papa.parse(movieCsvFile, {\n      download: true,\n      complete: function (results) {\n        results.data.shift(); // Remove csv header row\n        props.populateMovieList(results.data);\n      },\n    });\n  } catch (error) {\n    throw new Error(\"Parse movie csv file error\");\n  }\n};\n\nconst getRandomNumbers = () => {\n  // Get 3 random int numbers between 0-1000\n\n  const movieIds = [];\n\n  while (movieIds.length < 5) {\n    let movieId = Math.floor(Math.random() * 1000) + 1;\n    if (!movieIds.includes(movieId)) {\n      movieIds.push(movieId);\n    }\n  }\n  return movieIds;\n};\n\nconst getNewMovies = (movieList) => {\n  // Return an array of 3 random movies from the 1000 list\n\n  const movieIds = getRandomNumbers();\n  const newMovieList = [];\n  let foundMovie;\n\n  for (let movieId of movieIds) {\n    foundMovie = movieList.find((movie) => movie[5] === movieId.toString());\n    newMovieList.push(foundMovie);\n  }\n  return newMovieList;\n};\n\nexport const getMovieTiles = (movieList) => {\n  // Return movie tiles JSX\n\n  let newMovieList = getNewMovies(movieList);\n  try {\n    return (\n      <>\n        {newMovieList.map((newMovie) => (\n          <div className=\"col movie-tile-col\" key={newMovie[5]}>\n            <MovieTile movie={newMovie} recommendation={false} />\n          </div>\n        ))}\n      </>\n    );\n  } catch (error) {\n    throw new Error(\"Get Movie tile JSX Error\");\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  populateMovieList,\n  playFinderFunction,\n  restartFinderFunction,\n} from \"../../Redux/Actions/movieListActions\";\nimport { recommendMovies } from \"../../Functions/RecommendedMoviesFunctions\";\nimport { read_csv, getMovieTiles } from \"../../Functions/MovieSelectionFunctions\";\n\nconst Card = (props) => {\n  // Load the movie list on Redux on first render\n  useEffect(() => {\n    if (props.movieList === null) {\n      read_csv(props);\n    }\n  });\n\n  // Keep updated Movie Tiles\n  const [movieTiles, setmovieTiles] = useState(\"\");\n  const renderMovieTiles = () => {\n    if (!props.playFinder) {\n      props.playFinderFunction();\n    }\n    setmovieTiles(getMovieTiles(props.movieList));\n  };\n\n  // Show Recommended movies after 10 picks\n  const showRecommendationMovies = () => {\n    setmovieTiles(recommendMovies(props.pickedMovieList, props.movieList));\n  };\n\n  // Re Render MovieTiles\n  useEffect(() => {\n    if (props.cardNumber > 0 && props.cardNumber < 10) {\n      renderMovieTiles();\n    } else if (props.cardNumber === 10) {\n      showRecommendationMovies();\n    }\n  }, [props.cardNumber]); // TODO fix eslint warning\n\n  return (\n    <>\n      {props.darkMode ? (\n        <div className=\"row justify-content-center dark-body\" id=\"card-row\">\n          {props.playFinder ? (\n            <div className=\"col dark-card\" id=\"card-col\">\n              {props.cardNumber === 10 ? (\n                <h2 id=\"card-title\" className=\"recommendation\">\n                  You should check out these movies!\n                </h2>\n              ) : (\n                <h2 id=\"card-title\">Choose your favorite movies!</h2>\n              )}\n              <div className=\"row\">{movieTiles}</div>\n              <div className=\"row justify-content-center\">\n                <div className=\"col\">\n                  {props.cardNumber === 10 ? (\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-primary complete\"\n                      id=\"play-button\"\n                      onClick={() => {\n                        props.restartFinderFunction();\n                      }}\n                    >\n                      Start Again!\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-primary\"\n                      id=\"play-button\"\n                      onClick={() => renderMovieTiles()}\n                    >\n                      None\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"col dark-card\" id=\"card-col\">\n              <p id=\"card-title-landing\">\n                Movie Finder lets you discover new movies to watch by evaluating your favorite\n                movies. Simply pick your favorite movies from each selection and let A.I. do the\n                rest!\n              </p>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                    id=\"play-button\"\n                    onClick={() => renderMovieTiles()}\n                  >\n                    Play\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"row justify-content-center\" id=\"card-row\">\n          {props.playFinder ? (\n            <div className=\"col\" id=\"card-col\">\n              {props.cardNumber === 10 ? (\n                <h2 id=\"card-title\" className=\"recommendation\">\n                  You should check out these movies!\n                </h2>\n              ) : (\n                <h2 id=\"card-title\">Choose your favorite movies!</h2>\n              )}\n              <div className=\"row\">{movieTiles}</div>\n              <div className=\"row justify-content-center\">\n                <div className=\"col\">\n                  {props.cardNumber === 10 ? (\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-primary complete\"\n                      id=\"play-button\"\n                      onClick={() => {\n                        props.restartFinderFunction();\n                      }}\n                    >\n                      Start Again!\n                    </button>\n                  ) : (\n                    <button\n                      type=\"button\"\n                      className=\"btn btn-primary\"\n                      id=\"play-button\"\n                      onClick={() => renderMovieTiles()}\n                    >\n                      None\n                    </button>\n                  )}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"col\" id=\"card-col\">\n              <p id=\"card-title-landing\">\n                Movie Finder lets you discover new movies to watch by evaluating your favorite\n                movies. Simply pick your favorite movies from each selection and let A.I. do the\n                rest!\n              </p>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                    id=\"play-button\"\n                    onClick={() => renderMovieTiles()}\n                  >\n                    Play\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  pickedMovieList: state.pickedMovieList,\n  movieList: state.movieList,\n  playFinder: state.playFinder,\n  cardNumber: state.cardNumber,\n  darkMode: state.darkMode,\n});\n\nconst mapDispatchToProps = { populateMovieList, playFinderFunction, restartFinderFunction };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\n","import Header from \"./Components/Header/Header\";\nimport Card from \"./Components/Card/Card\";\nimport { connect } from \"react-redux\";\n\nfunction App(props) {\n  return (\n    <>\n      {props.darkMode ? (\n        <div className=\"container-fluid dark-body\" id=\"app-container\">\n          <Header />\n          <Card />\n        </div>\n      ) : (\n        <div className=\"container-fluid\" id=\"app-container\">\n          <Header />\n          <Card />\n        </div>\n      )}\n    </>\n  );\n}\nconst mapStateToProps = (state) => ({ darkMode: state.darkMode });\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  ADD_PICKED_MOVIE,\n  POPULATE_MOVIE_LIST,\n  PLAY_FINDER,\n  CARD_NUMBER,\n  DARK_MODE,\n  RESTART_FINDER,\n} from \"../../Redux/Actions/types\";\n\n/*\n ** movieReducer.js\n ** Returns state based on actions provided\n */\n\nconst initialState = {\n  movieList: null,\n  pickedMovieList: [],\n  playFinder: false,\n  cardNumber: 0,\n  darkMode: false,\n};\n\nconst movieListReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_PICKED_MOVIE:\n      return {\n        ...state,\n        pickedMovieList: [...state.pickedMovieList, action.payload],\n      };\n    case POPULATE_MOVIE_LIST:\n      return {\n        ...state,\n        movieList: action.payload,\n      };\n    case PLAY_FINDER:\n      return {\n        ...state,\n        playFinder: true,\n      };\n    case RESTART_FINDER:\n      return {\n        ...state,\n        playFinder: false,\n        pickedMovieList: [],\n        cardNumber: 0,\n      };\n    case CARD_NUMBER:\n      return {\n        ...state,\n        cardNumber: state.cardNumber + 1,\n      };\n    case DARK_MODE:\n      return {\n        ...state,\n        darkMode: !state.darkMode,\n      };\n    default:\n      return state;\n  }\n};\nexport default movieListReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport movieListReducer from \"./Redux/Reducers/movieListReducer\";\n\n/*\n ** Store.js\n ** Store holds the whole state tree of your application.\n */\n\nexport const middleware = [thunk];\n\nlet store;\n\nif (window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()) {\n  store = createStore(\n    movieListReducer,\n    // compose is used when multiple enhancers are present\n    compose(\n      applyMiddleware(...middleware),\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n  );\n} else {\n  store = createStore(movieListReducer, compose(applyMiddleware(...middleware)));\n}\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom'\n\nimport './SCSS/main.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nimport { Provider } from \"react-redux\";\nimport store from \"../src/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
{"version":3,"sources":["Redux/Actions/types.js","Redux/Actions/movieListActions.js","Components/Header/Header.js","Components/Card/MovieTile.js","Utils/MovieRecommendation.js","Data/imdb_top_1000.csv","Utils/MovieSelection.js","Components/Card/Card.js","App.js","reportWebVitals.js","Redux/Reducers/movieListReducer.js","store.js","index.js"],"names":["POPULATE_MOVIE_LIST","ADD_PICKED_MOVIE","CARD_NUMBER","PLAY_FINDER","RESTART_FINDER","DARK_MODE","restartFinderFunction","type","mapDispatchToProps","toggleDarkMode","connect","state","darkMode","props","className","id","onClick","icon","faFilm","name","increaseCardNumber","addPickedMovie","movie","payload","useState","showDescription","setshowDescription","faInfoCircle","onMouseEnter","onMouseLeave","onTouchStart","recommendation","undefined","src","alt","getOldestYearAndGenres","pickedMovieList","earliestReleasedYear","genreMap","Map","forEach","parseInt","split","map","genre","trim","has","set","get","getTopGenre","entries","sort","a","b","keys","next","value","recommendMovies","movieList","recommendedMovieList","randomMovieId","movieNumber","newMovieList","pickedMovieListIds","topGenre","length","Math","floor","random","includes","push","error","Error","findRecommendedMovies","recommendedMovie","getNewMovies","foundMovie","movieIds","movieId","getRandomNumbers","find","toString","getMovieTiles","newMovie","populateMovieList","playFinderFunction","playFinder","cardNumber","useEffect","Papa","parse","movieCsvFile","download","complete","results","data","shift","read_csv","movieTiles","setmovieTiles","renderMovieTiles","window","scroll","top","behavior","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","movieListReducer","action","middleware","thunk","store","__REDUX_DEVTOOLS_EXTENSION__","createStore","compose","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2eb1210.chunk.js","sourcesContent":["/*\n ** types.js\n ** A list of resuable types to use througout the actions\n */\nexport const POPULATE_MOVIE_LIST = \"POPULATE_MOVIE_LIST\";\nexport const ADD_PICKED_MOVIE = \"ADD_PICKED_MOVIE\";\n\nexport const CARD_NUMBER = \"CARD_NUMBER\";\nexport const PLAY_FINDER = \"PLAY_FINDER\";\nexport const RESTART_FINDER = \"RESTART_FINDER\";\n\nexport const DARK_MODE = \"DARK_MODE\";\n","import {\n  ADD_PICKED_MOVIE,\n  POPULATE_MOVIE_LIST,\n  PLAY_FINDER,\n  CARD_NUMBER,\n  DARK_MODE,\n  RESTART_FINDER,\n} from \"./types\";\n\n/*\n ** movieListActions.js\n ** Controls actions around the picked movie list used in the application.\n */\n\nexport const populateMovieList = (movieList) => {\n  return {\n    type: POPULATE_MOVIE_LIST,\n    payload: movieList,\n  };\n};\n\nexport const addPickedMovie = (movie) => {\n  return {\n    type: ADD_PICKED_MOVIE,\n    payload: movie,\n  };\n};\n\nexport const playFinderFunction = () => {\n  return {\n    type: PLAY_FINDER,\n  };\n};\n\nexport const restartFinderFunction = () => {\n  return {\n    type: RESTART_FINDER,\n  };\n};\n\nexport const increaseCardNumber = () => {\n  return {\n    type: CARD_NUMBER,\n  };\n};\n\nexport const toggleDarkMode = () => {\n  return {\n    type: DARK_MODE,\n  };\n};\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm } from \"@fortawesome/free-solid-svg-icons\";\nimport { connect } from \"react-redux\";\nimport { toggleDarkMode, restartFinderFunction } from \"../../Redux/Actions/movieListActions\";\n\nfunction Header(props) {\n  return (\n    <div className={`row align-items-center ${props.darkMode ? \"dark\" : \"\"}`} id=\"header-row\">\n      <div className={`col-9 ${props.darkMode ? \"dark\" : \"\"}`} id=\"header-col\">\n        <span onClick={() => props.restartFinderFunction()}>\n          <FontAwesomeIcon\n            icon={faFilm}\n            id=\"header-icon\"\n            className={`${props.darkMode ? \"dark\" : \"\"}`}\n          />\n          Movie Finder\n        </span>\n      </div>\n      <div className=\"col-3\">\n        <div id=\"dark-mode-title\">Dark Mode</div>\n        <label className=\"switch\">\n          <input type=\"checkbox\" name=\"dark-mode-checkbox\" onClick={() => props.toggleDarkMode()} />\n          <span className=\"slider round\"></span>\n        </label>\n      </div>\n    </div>\n  );\n}\nconst mapStateToProps = (state) => ({ darkMode: state.darkMode });\n\nconst mapDispatchToProps = { toggleDarkMode, restartFinderFunction };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport { increaseCardNumber, addPickedMovie } from \"../../Redux/Actions/movieListActions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nconst MovieTile = (props) => {\n  const [showDescription, setshowDescription] = useState(\"movie-tile-description-hidden\");\n  return (\n    <div className=\"movie-tile\">\n      <FontAwesomeIcon\n        icon={faInfoCircle}\n        className=\"movietile-info\"\n        onMouseEnter={() => setshowDescription(\"movie-tile-description-shown\")}\n        onMouseLeave={() => setshowDescription(\"movie-tile-description-hidden\")}\n        onTouchStart={() => setshowDescription(\"movie-tile-description-shown\")}\n      />\n      <p className={showDescription}>{props.movie[4]}</p>\n      <img\n        onClick={\n          props.recommendation\n            ? undefined\n            : () => {\n                props.increaseCardNumber();\n                props.addPickedMovie(props.movie);\n              }\n        }\n        src={props.movie[0]}\n        alt={props.movie[1]}\n        className={\n          props.recommendation\n            ? `movie-tile-img ${props.darkMode ? \"dark-tile-img\" : \"\"} recommendation`\n            : `movie-tile-img ${props.darkMode ? \"dark-tile-img\" : \"\"}`\n        }\n      />\n      <div className=\"movie-tile-title\">{props.movie[1]}</div>\n    </div>\n  );\n};\nconst mapStateToProps = (state) => ({ darkMode: state.darkMode });\n\nconst mapDispatchToProps = { increaseCardNumber, addPickedMovie };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieTile);\n","import MovieTile from \"../Components/Card/MovieTile\";\n\nexport const getOldestYearAndGenres = (pickedMovieList) => {\n  let earliestReleasedYear = 3000;\n  const genreMap = new Map();\n\n  // Find the oldest picked movie year\n  pickedMovieList.forEach((movie) => {\n    if (parseInt(movie[2]) < earliestReleasedYear) {\n      earliestReleasedYear = parseInt(movie[2]);\n    }\n    // Count genre occurrences\n    const genres = movie[3].split(\",\").map((genre) => genre.trim());\n    genres.forEach((genre) => {\n      if (!genreMap.has(genre)) {\n        genreMap.set(genre, 0);\n      }\n      genreMap.set(genre, genreMap.get(genre) + 1);\n    });\n  });\n  return { earliestReleasedYear, genreMap };\n};\n\nexport const getTopGenre = (genreMap) => {\n  const genreMapSorted = new Map([...genreMap.entries()].sort((a, b) => b[1] - a[1]));\n  return genreMapSorted.keys().next().value;\n};\n\nexport const findRecommendedMovies = (pickedMovieList, movieList, movieNumber = 10) => {\n  /*\n    Filter the initial movie list and show movies that are newer than \n    the oldest picked movie and contain the users most popular genre\n    */\n  const newMovieList = [];\n  let pickedMovieListIds = pickedMovieList.map((movie) => movie[5]);\n  const { earliestReleasedYear, genreMap } = getOldestYearAndGenres(pickedMovieList);\n  const topGenre = getTopGenre(genreMap);\n  let randomMovieId;\n\n  // TODO Infinite loop if there are less movies(< movieNumber) that are more recent than the earliestyear\n  while (newMovieList.length < movieNumber) {\n    randomMovieId = Math.floor(Math.random() * movieList.length);\n    try {\n      if (\n        !pickedMovieListIds.includes(movieList[randomMovieId][5]) &&\n        movieList[randomMovieId][3]\n          .split(\",\")\n          .map((genre) => genre.trim())\n          .includes(topGenre) &&\n        parseInt(movieList[randomMovieId][2]) > earliestReleasedYear\n      ) {\n        newMovieList.push(movieList[randomMovieId]);\n        pickedMovieListIds.push(movieList[randomMovieId][5]);\n      }\n    } catch (error) {\n      throw new Error(\"Cant Find recommended movies\");\n    }\n  }\n  return newMovieList;\n};\n\n// Return recommended movie tiles jsx\nexport const recommendMovies = (pickedMovieList, movieList) => {\n  const recommendedMovieList = findRecommendedMovies(pickedMovieList, movieList);\n  return (\n    <>\n      {recommendedMovieList.map((recommendedMovie) => (\n        <div className=\"col movie-tile-col\" key={recommendedMovie[5]}>\n          <MovieTile movie={recommendedMovie} recommendation={true} />\n        </div>\n      ))}\n    </>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/imdb_top_1000.e12a5ba6.csv\";","import Papa from \"papaparse\";\nimport movieCsvFile from \"../Data/imdb_top_1000.csv\";\nimport MovieTile from \"../Components/Card/MovieTile\";\n\nexport const read_csv = (props) => {\n  // Load the 1000 movie list from the csv file to the redux state\n\n  try {\n    Papa.parse(movieCsvFile, {\n      download: true,\n      complete: function (results) {\n        results.data.shift(); // Remove csv header row\n        props.populateMovieList(results.data);\n      },\n    });\n  } catch (error) {\n    throw new Error(\"Parse movie csv file error\");\n  }\n};\n\nexport const getRandomNumbers = () => {\n  // Get 3 random int numbers between 0-1000\n\n  const movieIds = [];\n\n  while (movieIds.length < 5) {\n    let movieId = Math.floor(Math.random() * 1000) + 1;\n    if (!movieIds.includes(movieId)) {\n      movieIds.push(movieId);\n    }\n  }\n  return movieIds;\n};\n\nexport const getNewMovies = (movieList) => {\n  // Return an array of 3 random movies from the 1000 list\n\n  const movieIds = getRandomNumbers();\n  const newMovieList = [];\n  let foundMovie;\n\n  for (let movieId of movieIds) {\n    foundMovie = movieList.find((movie) => movie[5] === movieId.toString());\n    newMovieList.push(foundMovie);\n  }\n  return newMovieList;\n};\n\nexport const getMovieTiles = (movieList) => {\n  // Return movie tiles JSX\n\n  const newMovieList = getNewMovies(movieList);\n  try {\n    return (\n      <>\n        {newMovieList.map((newMovie) => (\n          <div className=\"col movie-tile-col\" key={newMovie[5]}>\n            <MovieTile movie={newMovie} recommendation={false} />\n          </div>\n        ))}\n      </>\n    );\n  } catch (error) {\n    throw new Error(\"Get Movie tile JSX Error\");\n  }\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  populateMovieList,\n  playFinderFunction,\n  restartFinderFunction,\n} from \"../../Redux/Actions/movieListActions\";\nimport { recommendMovies } from \"../../Utils/MovieRecommendation\";\nimport { read_csv, getMovieTiles } from \"../../Utils/MovieSelection\";\n\nconst Card = (props) => {\n  // Load the movie list on Redux on first render\n  useEffect(() => {\n    if (props.movieList === null) {\n      read_csv(props);\n    }\n  });\n\n  // Keep updated Movie Tiles\n  const [movieTiles, setmovieTiles] = useState(\"\");\n  const renderMovieTiles = () => {\n    if (!props.playFinder) {\n      props.playFinderFunction();\n    }\n    setmovieTiles(getMovieTiles(props.movieList));\n  };\n\n  // Show Recommended movies after 10 picks\n  const showRecommendationMovies = () => {\n    setmovieTiles(recommendMovies(props.pickedMovieList, props.movieList));\n    window.scroll({\n      top: 0,\n      behavior: \"smooth\",\n    });\n  };\n\n  // Re Render MovieTiles\n  useEffect(() => {\n    const renderMovieTiles = () => {\n      if (!props.playFinder) {\n        props.playFinderFunction();\n      }\n      setmovieTiles(getMovieTiles(props.movieList));\n    };\n\n    if (props.cardNumber > 0 && props.cardNumber < 10) {\n      renderMovieTiles();\n    } else if (props.cardNumber === 10) {\n      showRecommendationMovies();\n    }\n    /* eslint-disable */\n  }, [props.cardNumber]); // TODO fix eslint warning\n\n  return (\n    <div\n      className={`row justify-content-center ${props.darkMode ? \"dark-body\" : \"\"}`}\n      id=\"card-row\"\n    >\n      {props.playFinder ? (\n        <div className={`col ${props.darkMode ? \"dark-card\" : \"\"}`} id=\"card-col\">\n          {props.cardNumber === 10 ? (\n            <h2 id=\"card-title\" className=\"recommendation\">\n              You should check out these movies!\n            </h2>\n          ) : (\n            <h2 id=\"card-title\">Choose your favorite movies!</h2>\n          )}\n          <div className=\"row\">{movieTiles}</div>\n          <div className=\"row justify-content-center\">\n            {props.cardNumber === 10 ? (\n              <div className=\"col\">\n                <button\n                  type=\"button\"\n                  className=\"btn btn-primary complete\"\n                  id=\"play-button\"\n                  onClick={() => {\n                    props.restartFinderFunction();\n                  }}\n                >\n                  Start Again!\n                </button>\n              </div>\n            ) : (\n              <>\n                <div className=\"col\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary restart\"\n                    id=\"play-button\"\n                    onClick={() => props.restartFinderFunction()}\n                  >\n                    Restart\n                  </button>\n                </div>\n                <div className=\"col\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary none\"\n                    id=\"play-button\"\n                    onClick={() => renderMovieTiles()}\n                  >\n                    None\n                  </button>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div className={`col ${props.darkMode ? \"dark-card\" : \"\"}`} id=\"card-col\">\n          <p id=\"card-title-landing\">\n            Movie Finder lets you discover new movies to watch by evaluating your favorite movies.\n            Simply pick your favorite movies from each selection and let A.I. do the rest!\n          </p>\n          <div className=\"row\">\n            <div className=\"col\">\n              <button\n                type=\"button\"\n                className=\"btn btn-primary\"\n                id=\"play-button\"\n                onClick={() => renderMovieTiles()}\n              >\n                Play\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  pickedMovieList: state.pickedMovieList,\n  movieList: state.movieList,\n  playFinder: state.playFinder,\n  cardNumber: state.cardNumber,\n  darkMode: state.darkMode,\n});\n\nconst mapDispatchToProps = { populateMovieList, playFinderFunction, restartFinderFunction };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\n","import Header from \"./Components/Header/Header\";\nimport Card from \"./Components/Card/Card\";\nimport { connect } from \"react-redux\";\n\nfunction App(props) {\n  return (\n    <>\n      {props.darkMode ? (\n        <div className=\"container-fluid dark-body\" id=\"app-container\">\n          <Header />\n          <Card />\n        </div>\n      ) : (\n        <div className=\"container-fluid\" id=\"app-container\">\n          <Header />\n          <Card />\n        </div>\n      )}\n    </>\n  );\n}\nconst mapStateToProps = (state) => ({ darkMode: state.darkMode });\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  ADD_PICKED_MOVIE,\n  POPULATE_MOVIE_LIST,\n  PLAY_FINDER,\n  CARD_NUMBER,\n  DARK_MODE,\n  RESTART_FINDER,\n} from \"../../Redux/Actions/types\";\n\n/*\n ** movieReducer.js\n ** Returns state based on actions provided\n */\n\nconst initialState = {\n  movieList: null,\n  pickedMovieList: [],\n  playFinder: false,\n  cardNumber: 0,\n  darkMode: false,\n};\n\nconst movieListReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_PICKED_MOVIE:\n      return {\n        ...state,\n        pickedMovieList: [...state.pickedMovieList, action.payload],\n      };\n    case POPULATE_MOVIE_LIST:\n      return {\n        ...state,\n        movieList: action.payload,\n      };\n    case PLAY_FINDER:\n      return {\n        ...state,\n        playFinder: true,\n      };\n    case RESTART_FINDER:\n      return {\n        ...state,\n        playFinder: false,\n        pickedMovieList: [],\n        cardNumber: 0,\n      };\n    case CARD_NUMBER:\n      return {\n        ...state,\n        cardNumber: state.cardNumber + 1,\n      };\n    case DARK_MODE:\n      return {\n        ...state,\n        darkMode: !state.darkMode,\n      };\n    default:\n      return state;\n  }\n};\nexport default movieListReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport movieListReducer from \"./Redux/Reducers/movieListReducer\";\n\n/*\n ** Store.js\n ** Store holds the whole state tree of your application.\n */\n\nexport const middleware = [thunk];\n\nlet store;\n\nif (window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()) {\n  store = createStore(\n    movieListReducer,\n    // compose is used when multiple enhancers are present\n    compose(\n      applyMiddleware(...middleware),\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n  );\n} else {\n  store = createStore(movieListReducer, compose(applyMiddleware(...middleware)));\n}\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom'\n\nimport './SCSS/main.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nimport { Provider } from \"react-redux\";\nimport store from \"../src/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
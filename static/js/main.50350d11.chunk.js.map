{"version":3,"sources":["Redux/Actions/types.js","Components/Header/Header.js","Redux/Actions/movieListActions.js","Data/imdb_top_1000.csv","Components/Card/MovieTile.js","Components/Card/MovieFileFunctions.js","Components/Card/Card.js","App.js","reportWebVitals.js","Redux/Reducers/movieListReducer.js","Redux/Reducers/index.js","store.js","index.js"],"names":["POPULATE_MOVIE_LIST","ADD_MOVIE_ID","CARD_NUMBER","PLAY_FINDER","DARK_MODE","mapDispatchToProps","toggleDarkMode","type","connect","state","darkMode","movies","props","className","id","icon","faFilm","onClick","useState","showDescription","setshowDescription","faInfoCircle","onMouseEnter","onMouseLeave","onTouchStart","movie","increaseCardNumber","src","alt","getMovieTiles","movieList","newMovieList","movieIds","foundMovie","length","movieId","Math","floor","random","includes","push","find","toString","getNewMovies","map","newMovie","populateMovieList","payload","playFinderFunction","pickedMovieList","playFinder","cardNumber","useEffect","Papa","parse","movielist","download","complete","results","data","shift","read_csv","movieTiles","setmovieTiles","renderMovieTiles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","movieListReducer","action","combineReducers","middleware","thunk","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","rootReducer","compose","applyMiddleware","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50350d11.chunk.js","sourcesContent":["/*\n ** types.js\n ** A list of resuable types to use througout the actions\n */\nexport const POPULATE_MOVIE_LIST = \"POPULATE_MOVIE_LIST\";\nexport const ADD_MOVIE_ID = \"ADD_MOVIE_ID\";\nexport const CARD_NUMBER = \"CARD_NUMBER\";\n\nexport const PLAY_FINDER = \"PLAY_FINDER\";\n\nexport const DARK_MODE = \"DARK_MODE\";\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faFilm } from \"@fortawesome/free-solid-svg-icons\";\nimport { connect } from \"react-redux\";\nimport { toggleDarkMode } from \"../../Redux/Actions/movieListActions\";\n\nfunction Header(props) {\n  return (\n    <>\n      {props.darkMode ? (\n        <div className=\"row align-items-center dark\" id=\"header-row\">\n          <div className=\"col-9 dark\" id=\"header-col\">\n            <FontAwesomeIcon icon={faFilm} id=\"header-icon\" />\n            Movie Finder\n          </div>\n          <div className=\"col-3\">\n            <div id=\"dark-mode-title\">Dark Mode</div>\n            <label className=\"switch\">\n              <input type=\"checkbox\" onClick={() => props.toggleDarkMode()} />\n              <span className=\"slider round\"></span>\n            </label>\n          </div>\n        </div>\n      ) : (\n        <div className=\"row align-items-center\" id=\"header-row\">\n          <div className=\"col-9\" id=\"header-col\">\n            <FontAwesomeIcon icon={faFilm} id=\"header-icon\" />\n            Movie Finder\n          </div>\n          <div className=\"col-3\">\n            <div id=\"dark-mode-title\">Dark Mode</div>\n            <label className=\"switch\">\n              <input type=\"checkbox\" onClick={() => props.toggleDarkMode()} />\n              <span className=\"slider round\"></span>\n            </label>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\nconst mapStateToProps = (state) => ({ darkMode: state.movies.darkMode });\n\nconst mapDispatchToProps = { toggleDarkMode };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import { ADD_MOVIE_ID, POPULATE_MOVIE_LIST, PLAY_FINDER, CARD_NUMBER, DARK_MODE } from \"./types\";\n\n/*\n ** movieListActions.js\n ** Controls actions around the picked movie list used in the application.\n */\n\nexport const populateMovieList = (movieList) => {\n  return {\n    type: POPULATE_MOVIE_LIST,\n    payload: movieList,\n  };\n};\n\nexport const addMovieId = () => {\n  return {\n    type: ADD_MOVIE_ID,\n  };\n};\n\nexport const playFinderFunction = () => {\n  return {\n    type: PLAY_FINDER,\n  };\n};\n\nexport const increaseCardNumber = () => {\n  return {\n    type: CARD_NUMBER,\n  };\n};\n\nexport const toggleDarkMode = () => {\n  return {\n    type: DARK_MODE,\n  };\n};\n","export default __webpack_public_path__ + \"static/media/imdb_top_1000.e12a5ba6.csv\";","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\n\nconst MovieTile = (props) => {\n  const [showDescription, setshowDescription] = useState(\"movie-tile-description-hidden\");\n\n  return (\n    <>\n      {props.darkMode ? (\n        <div className=\"movie-tile \">\n          <FontAwesomeIcon\n            icon={faInfoCircle}\n            className=\"movietile-info\"\n            onMouseEnter={() => setshowDescription(\"movie-tile-description-shown\")}\n            onMouseLeave={() => setshowDescription(\"movie-tile-description-hidden\")}\n            onTouchStart={() => setshowDescription(\"movie-tile-description-shown\")}\n          />\n          <p className={showDescription}>{props.movie[4]}</p>\n          <img\n            onClick={() => props.increaseCardNumber()}\n            src={props.movie[0]}\n            alt={props.movie[1]}\n            className=\"movie-tile-img dark-tile-img\"\n          />\n          <div className=\"movie-tile-title\">{props.movie[1]}</div>\n        </div>\n      ) : (\n        <div className=\"movie-tile\">\n          <FontAwesomeIcon\n            icon={faInfoCircle}\n            className=\"movietile-info\"\n            onMouseEnter={() => setshowDescription(\"movie-tile-description-shown\")}\n            onMouseLeave={() => setshowDescription(\"movie-tile-description-hidden\")}\n            onTouchStart={() => setshowDescription(\"movie-tile-description-shown\")}\n          />\n          <p className={showDescription}>{props.movie[4]}</p>\n          <img\n            onClick={() => props.increaseCardNumber()}\n            src={props.movie[0]}\n            alt={props.movie[1]}\n            className=\"movie-tile-img\"\n          />\n          <div className=\"movie-tile-title\">{props.movie[1]}</div>\n        </div>\n      )}\n    </>\n  );\n};\nconst mapStateToProps = (state) => ({ darkMode: state.movies.darkMode });\n\nexport default connect(mapStateToProps)(MovieTile);\n","import Papa from \"papaparse\";\nimport movielist from \"../../Data/imdb_top_1000.csv\";\nimport MovieTile from \"./MovieTile\";\n\nexport const read_csv = (props) => {\n  // Load the 1000 movie list from the csv file to the redux state\n  Papa.parse(movielist, {\n    download: true,\n    complete: function (results) {\n      results.data.shift();\n      props.populateMovieList(results.data);\n    },\n  });\n};\n\nconst getNewMovies = (movieList) => {\n  // Return an array of 3 random movies from the 1000 list\n  let movieIds = [];\n  let newMovieList = [];\n  let foundMovie = null;\n  // Get 3 random int numbers between 0-1000\n  while (movieIds.length <= 2) {\n    let movieId = Math.floor(Math.random() * 1000);\n    if (!movieIds.includes(movieId)) {\n      movieIds.push(movieId);\n    }\n  }\n  // Get the movies that correspond to the 3 random numbers\n  for (let movieId of movieIds) {\n    foundMovie = movieList.find((movie) => movie[5] === movieId.toString());\n    newMovieList.push(foundMovie);\n  }\n  return newMovieList;\n};\n\nexport const getMovieTiles = (movieList, increaseCardNumber) => {\n  let newMovieList = getNewMovies(movieList);\n  return (\n    <>\n      {newMovieList.map((newMovie) => (\n        <div className=\"col movie-tile-col\" key={newMovie[5]}>\n          <MovieTile movie={newMovie} increaseCardNumber={increaseCardNumber} />\n        </div>\n      ))}\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  populateMovieList,\n  playFinderFunction,\n  increaseCardNumber,\n} from \"../../Redux/Actions/movieListActions\";\nimport { read_csv, getMovieTiles } from \"./MovieFileFunctions\";\n\nconst Card = (props) => {\n  // Load the movie list on Redux on first render\n  useEffect(() => {\n    if (props.movieList === null) {\n      read_csv(props);\n    }\n  });\n\n  // Keep updated Movie Tiles\n  const [movieTiles, setmovieTiles] = useState(\"\");\n  const renderMovieTiles = () => {\n    if (!props.playFinder) {\n      props.playFinderFunction();\n    }\n    setmovieTiles(getMovieTiles(props.movieList, props.increaseCardNumber));\n  };\n\n  // Re Render MovieTiles\n  useEffect(() => {\n    if (props.cardNumber > 0) {\n      renderMovieTiles();\n    }\n  }, [props.cardNumber]); // TODO fix eslint warning\n\n  return (\n    <>\n      {props.darkMode ? (\n        <div className=\"row justify-content-center dark-body\" id=\"card-row\">\n          {props.playFinder ? (\n            <div className=\"col dark-card\" id=\"card-col\">\n              <h2 id=\"card-title\">Choose your favorite Movie!</h2>\n              <div className=\"row\">{movieTiles}</div>\n              <div className=\"row justify-content-center\">\n                <div className=\"col\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                    id=\"play-button\"\n                    onClick={() => renderMovieTiles()}\n                  >\n                    None\n                  </button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"col dark-card\" id=\"card-col\">\n              <h5 id=\"card-title\">\n                Movie Finder lets you discover new movies to watch by evaluating your favorite\n                movies. Simply pick your favorite movies from each selection and let A.I. do the\n                rest!\n              </h5>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                    id=\"play-button\"\n                    onClick={() => renderMovieTiles()}\n                  >\n                    Play\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"row justify-content-center\" id=\"card-row\">\n          {props.playFinder ? (\n            <div className=\"col\" id=\"card-col\">\n              <h2 id=\"card-title\">Choose your favorite Movie!</h2>\n              <div className=\"row\">{movieTiles}</div>\n              <div className=\"row justify-content-center\">\n                <div className=\"col\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                    id=\"play-button\"\n                    onClick={() => renderMovieTiles()}\n                  >\n                    None\n                  </button>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"col\" id=\"card-col\">\n              <h5 id=\"card-title\">\n                Movie Finder lets you discover new movies to watch by evaluating your favorite\n                movies. Simply pick your favorite movies from each selection and let A.I. do the\n                rest!\n              </h5>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <button\n                    type=\"button\"\n                    className=\"btn btn-primary\"\n                    id=\"play-button\"\n                    onClick={() => renderMovieTiles()}\n                  >\n                    Play\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  pickedMovieList: state.movies.pickedMovieList,\n  movieList: state.movies.movieList,\n  playFinder: state.movies.playFinder,\n  cardNumber: state.movies.cardNumber,\n  darkMode: state.movies.darkMode,\n});\n\nconst mapDispatchToProps = { populateMovieList, playFinderFunction, increaseCardNumber };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Card);\n","import Header from \"./Components/Header/Header\";\nimport Card from \"./Components/Card/Card\";\nimport { connect } from \"react-redux\";\n\nfunction App(props) {\n  return (\n    <>\n      {props.darkMode ? (\n        <div className=\"container-fluid dark-body\" id=\"app-container\">\n          <Header />\n          <Card />\n        </div>\n      ) : (\n        <div className=\"container-fluid\" id=\"app-container\">\n          <Header />\n          <Card />\n        </div>\n      )}\n    </>\n  );\n}\nconst mapStateToProps = (state) => ({ darkMode: state.movies.darkMode });\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  ADD_MOVIE_ID,\n  POPULATE_MOVIE_LIST,\n  PLAY_FINDER,\n  CARD_NUMBER,\n  DARK_MODE,\n} from \"../../Redux/Actions/types\";\n\n/*\n ** loginReducer.js\n ** Returns login state based on actions provided\n */\n\nconst initialState = {\n  movieList: null,\n  pickedMovieList: [\"Fwe\", \"Feggdeg\", \"Vieo\", \"Kiko\"],\n  playFinder: false,\n  cardNumber: 0,\n  darkMode: false,\n};\n\nconst movieListReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_MOVIE_ID:\n      return {\n        ...state,\n        pickedMovieList: action.payload,\n      };\n    case POPULATE_MOVIE_LIST:\n      return {\n        ...state,\n        movieList: action.payload,\n      };\n    case PLAY_FINDER:\n      return {\n        ...state,\n        playFinder: true,\n      };\n    case CARD_NUMBER:\n      return {\n        ...state,\n        cardNumber: state.cardNumber + 1,\n      };\n    case DARK_MODE:\n      return {\n        ...state,\n        darkMode: !state.darkMode,\n      };\n    default:\n      return state;\n  }\n};\nexport default movieListReducer;\n","import { combineReducers } from \"redux\";\nimport movieListReducer from \"./movieListReducer\";\n\n/*\n** index.js\n** combinereducers is used when multiple reducers are present\n*/\n\nexport default combineReducers({\n  movies:movieListReducer,\n});\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./Redux/Reducers\";\n\n/*\n** Store.js\n** Store holds the whole state tree of your application. \n*/\n\nexport const middleware = [thunk];\n\nlet store;\n\nif (\n  window.__REDUX_DEVTOOLS_EXTENSION__ &&\n  window.__REDUX_DEVTOOLS_EXTENSION__()\n) {\n  store = createStore(\n    rootReducer,\n    // compose is used when multiple enhancers are present\n    compose(\n      applyMiddleware(...middleware),\n      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n  );\n} else {\n  store = createStore(rootReducer, compose(applyMiddleware(...middleware)));\n}\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom'\n\nimport './SCSS/main.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nimport { Provider } from \"react-redux\";\nimport store from \"../src/store\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}